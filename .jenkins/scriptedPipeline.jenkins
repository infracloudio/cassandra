node('cassandra') {
    def javaVersionDefault
    def javaVersionsSupported

    stage('Preparation') {
        checkout scm
        javaVersionDefault = javaVersionDefault()
        javaVersionsSupported = javaVersionsSupported()
    }

    stage('Init') {
        cleanWs()
        currentBuild.result = 'SUCCESS'
    }

    stage('Builds') {
        parallel(
            "artifacts": {
                buildJob(".build/docker/build-artifacts.sh", "apache-cassandra-*.tar.gz,apache-cassandra-*.jar,apache-cassandra-*.pom")
            }
        )
    }

    stage('Test') {
        parallel(
            "lint": {
                buildJob(".build/docker/check-code.sh", "")
            },
            "debian": {
                buildJob(".build/docker/build-debian.sh", "cassandra_*,cassandra-tools_*")
            },
            "redhat": {
                buildJob(".build/docker/build-redhat.sh rpm", "*.rpm")
            },
            "centos7": {
                buildJob(".build/docker/build-redhat.sh noboolean", "*.rpm")
            },
            "stress": {
                testJob(".build/docker/run-tests.sh", "stress-test", 1)
            },
            "fqltool": {
                testJob(".build/docker/run-tests.sh", "fqltool-test", 1)
            }
            // ... Add more test stages as needed
        )
    }

    stage('Summary') {
        collectConsoleLog()
        copyToNightlies('console.log.xz,TESTS-TestSuites.xml.xz')
    }
}

def javaVersionDefault() {
    return sh(script: "grep 'property\\s*name=\"java.default\"' build.xml | sed -ne 's/.*value=\"\\([^\"]*\\)\".*/\\1/p'", returnStdout: true).trim()
}

def javaVersionsSupported() {
    return sh(script: "grep 'property\\s*name=\"java.supported\"' build.xml | sed -ne 's/.*value=\"\\([^\"]*\\)\".*/\\1/p'", returnStdout: true).trim()
}

// Define other helper functions and stages here
